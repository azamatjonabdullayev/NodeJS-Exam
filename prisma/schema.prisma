generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ! ENUMs
 */
enum Roles {
  ADMIN
  USER
  SUPERADMIN
}

enum PlanTier {
  TRIAL
  BASIC
  STANDARD
  PREMIUM
  PREMIUM_PLUS
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  PENDING
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  PAYPAL
  CRYPTO
}

enum VideoQuality {
  p240  @map("240p")
  p360  @map("360p")
  p480  @map("480p")
  p720  @map("720p")
  p1080 @map("1080p")
  p4K   @map("4k")
  p8K   @map("8k")
}

enum VideoLanguage {
  en
  ru
  uz
}

/**
 * ! USERS
 */
model User {
  id          String  @id @default(uuid()) @db.Uuid
  username    String  @unique @db.VarChar(100)
  avatarImage String? @map("avatar_image")
  email       String  @unique @db.VarChar(255)
  password    String  @db.VarChar(150)
  role        Roles   @default(USER)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()

  subscriptions UserSubscription[]
  movies        Movie[]
  favourites    Favourite[]
  reviews       Review[]

  @@map("users")
}

/**
 * ! SUBSCRIPTION PLANS
 */
model SubscriptionPlans {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @map("subscription_name") @db.VarChar(255)
  tier          PlanTier? @default(BASIC)
  description   String    @db.Text
  price         Float
  duration_days Int       @db.Integer
  is_active     Boolean?  @default(true)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()

  userSubscriptions UserSubscription[]

  @@map("subscription_plans")
}

/**
 * ! USER SUBSCRIPTIONS
 */
model UserSubscription {
  id             String              @id @default(uuid()) @db.Uuid
  userId         String              @map("user_id") @db.Uuid
  subscriptionId String              @map("subscription_id") @db.Uuid
  startDate      DateTime            @default(now()) @map("start_date") @db.Timestamp()
  endDate        DateTime            @map("end_date") @db.Timestamp()
  status         SubscriptionStatus? @default(PENDING)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()

  user         User              @relation(fields: [userId], references: [id])
  subscription SubscriptionPlans @relation(fields: [subscriptionId], references: [id])
  payment      Payment[]

  @@map("user_subscriptions")
}

/**
 * ! PAYMENTS
 */
model Payment {
  id                    String         @id @default(uuid()) @db.Uuid
  userSubscriptionId    String         @map("user_subscription_id") @db.Uuid
  amount                Float
  paymentMethod         PaymentMethod? @default(CASH)
  externalTransactionId String?        @map("external_transaction_id") @db.VarChar(50)

  paymentDate DateTime @default(now()) @map("payment_date") @db.Timestamp()

  userSubscription UserSubscription @relation(fields: [userSubscriptionId], references: [id])

  @@map("payments")
}

/**
 * ! CATEGORIES
 */
model Category {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique @db.VarChar(255)
  description String? @db.Text

  movies Movie[]

  @@map("categories")
}

/**
 * ! MOVIES
 */
model Movie {
  id               String    @id @default(uuid()) @db.Uuid
  title            String    @db.VarChar(255)
  description      String?   @db.Text
  categoryId       String    @map("category_id") @db.Uuid
  releaseYear      Int       @map("release_year")
  duration         Int
  poster_url       String    @db.VarChar(500)
  rating           Float
  subscriptionType PlanTier? @default(BASIC) @map("subscription_tier")
  view_count       Int       @default(0) @map("views")
  uploaded_by      String    @db.Uuid

  users    User     @relation(fields: [uploaded_by], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @default(now()) @db.Timestamp()

  movie_files MovieFiles[]
  favourites  Favourite[]
  reviews     Review[]

  @@map("movies")
}

model MovieFiles {
  id        String         @id @default(uuid()) @db.Uuid
  movieId   String         @map("movie_id") @db.Uuid
  video_url String         @db.VarChar(300)
  quality   VideoQuality?  @default(p4K)
  language  VideoLanguage? @default(uz)

  movies Movie @relation(fields: [movieId], references: [id])

  @@map("movie_files")
}

model Favourite {
  id      String @id @default(uuid()) @db.Uuid
  userId  String @map("user_id") @db.Uuid
  movieId String @map("movie_id") @db.Uuid

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
  @@map("favourites")
}

model Review {
  id      String  @id @default(uuid()) @db.Uuid
  userId  String  @map("user_id") @db.Uuid
  movieId String  @map("movie_id") @db.Uuid
  rating  Int
  comment String? @db.Text

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
  @@map("reviews")
}
